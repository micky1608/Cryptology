
def extended_euclidean(a,b):
    if a==0:
        return 0,1
    elif b==0:
        return 1,0
    else:
        u,v = extended_euclidean(b % a, a)
        return (v - (b//a) * u, u)



def rsa_private_key(p,q,e):
    phi = (p-1)*(q-1)
    u,v = extended_euclidean(e , phi)
    x,y = extended_euclidean(q , p)
    return u%phi , x%p


p = 3440785154234029529715901808885513713459455776103684735938094285221481260946694109934202622635993881963144306930474203439984139296748241453906586427032975567330282150404165484025537985551006594477057328520047295506258333809719687043576257533313152409826331706073268951124046260551838391671281481282446244264804353
q = 175275761066533767884321877421862395940019731063866773338573507628752500741216084751630694654854367576007779139110841056885527021468825001937056526682579445111559255358834636128671802763350195945834457900020124752484511573329090223898828768606120322866470883515970995313764078167574392384621363983901441041493

e = 65537

# coeff = q^-1 mod p
d , coeff = rsa_private_key(p,q,e)


print("n : ",p*q)
print("d : ",d)
print("coeff : ", coeff)
print("exponent 1 : " , d%(p-1))
print("exponent 2 : " , d%(q-1))

print("verif : ", (e*d)%((p-1)*(q-1)))
print("verif ; ", (coeff*q)%p)

