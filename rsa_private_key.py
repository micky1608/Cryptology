
def extended_euclidean(a,b):
    if a==0:
        return 0,1
    elif b==0:
        return 1,0
    else:
        u,v = extended_euclidean(b % a, a)
        return (v - (b//a) * u, u)



def rsa_private_key(p,q,e):
    phi = (p-1)*(q-1)
    u,v = extended_euclidean(e , phi)
    x,y = extended_euclidean(q , p)
    return u%phi , x%p


p = 44600120640238153
q = 419455190602238427962161304289733317466143194982094736529587530763496527024300680815015102910802832127700616234055985585477825469619165051018035483020508607540866592671569099509722288491910563051092320906081249873190545905361641174563400222262625101172284301482636866045629078139666563053172014065363961245984192032036433362505432376839192083833290178224742934946672240702514509335618263849600640585068648905169476853216990588155440829813319278148944342350606210322693108617075604417757649678413534924519434697270997936240578928263012071147447892366116945326516575363698978854513741918306190280340067
e = 65537

# coeff = q^-1 mod p
d , coeff = rsa_private_key(p,q,e)


print("n : ",p*q)
print("d : ",d)
print("coeff : ", coeff)
print("exponent 1 : " , d%(p-1))
print("exponent 2 : " , d%(q-1))

print("verif : ", (e*d)%((p-1)*(q-1)))
print("verif ; ", (coeff*q)%p)

